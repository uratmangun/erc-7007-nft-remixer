// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import {IERC7007} from "../interfaces/IERC7007.sol";
import {ERC721, IERC721, IERC721Metadata} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";

/**
*       DISCLAIMER: THIS SMART CONTRACT IS FOR DEMONSTRATION PURPOSES ONLY!
*                   IT IS NOT AUDITED!
*                   DO NOT USE IT IN PRODUCTION!
*/

/// @notice This contract allows users to mint AIGC NFTs
/// @dev Data generated by Onchain AI Oracle is used as a metadata for ERC721 token
contract AIGCNFT is IERC7007, ERC721 {

    struct AIGCData {
        bytes fortune;
        bytes imageCID;
        address author;
        uint256 requestId;
        uint256 nestedRequestId;
    }

    uint256 public totalSupply;

    //prompt => aigcData
    mapping(bytes => AIGCData) public aigc;

    //tokenId => prompt
    mapping(uint256 => bytes) public tokenIdToPrompt;

    //author => tokenIds
    mapping(address => uint256[]) public ownedTokens;

    function getOwnedTokens(address owner) public view returns (uint256[] memory){
        return ownedTokens[owner];
    }

    //prompt => tokenId
    mapping(bytes => uint256) public promptToTokenId;

    constructor() ERC721("On-chain AI Oracle", "OAO") {
        // totalSupply = 1;
    }

    function mint(string calldata prompt, uint256 requestId) internal {
        // require(promptToTokenId[bytes(prompt)] == 0, "prompt is already minted");
        promptToTokenId[bytes(prompt)] = totalSupply;
        tokenIdToPrompt[totalSupply] = bytes(prompt);
        aigc[bytes(prompt)].author = msg.sender;
        aigc[bytes(prompt)].requestId = requestId;
        ownedTokens[msg.sender].push(totalSupply);
        _safeMint(msg.sender, totalSupply);
        totalSupply++;
    }

    function tokenURI(uint256 tokenId) override public view returns (string memory) {
        bytes memory prompt = tokenIdToPrompt[tokenId];
        string memory json = Base64.encode(bytes(string(abi.encodePacked(
            '{"name":"token#', toString(tokenId), '", "attributes": [{"trait_type": "author", "value": "0x', toAsciiString(aigc[prompt].author), '"}, {"trait_type": "model", "value": "Stable Diffusion v3"}], "description": "FortuneTeller utilises ORAs AI Oracle to mint AIGC NFTs about each players fortune.", "image": "ipfs://', string(aigc[prompt].imageCID), '"}'))));
        string memory output = string(abi.encodePacked('data:application/json;base64,', json));

        return output;
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721, IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(ERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev Add AIGC data to token at `tokenId` given `prompt`, `aigcData` and `proof`.
     *
     * Optional:
     * - `proof` should not include `aigcData` to save gas.
     * - verify(`prompt`, `aigcData`, `proof`) should return true for zkML scenario.
     */
    function addAigcData(
        uint256 tokenId,
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) external {}

    /**
     * @dev Verify the `prompt`, `aigcData` and `proof`.
     */
    function verify(
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) external view virtual returns (bool success) {
        return true;
    }

    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT license
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}

function toAsciiString(address x) pure returns (string memory) {
    bytes memory s = new bytes(40);
    for (uint i = 0; i < 20; i++) {
        bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));
        bytes1 hi = bytes1(uint8(b) / 16);
        bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
        s[2*i] = char(hi);
        s[2*i+1] = char(lo);            
    }
    return string(s);
}

function char(bytes1 b) pure returns (bytes1 c) {
    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);
    else return bytes1(uint8(b) + 0x57);
}

/// [MIT License]
/// @title Base64
/// @notice Provides a function for encoding some bytes in base64
/// @author Brecht Devos <brecht@loopring.org>
library Base64 {
    bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /// @notice Encodes some bytes to the base64 representation
    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((len + 2) / 3);

        // Add some extra buffer at the end
        bytes memory result = new bytes(encodedLen + 32);

        bytes memory table = TABLE;

        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)

            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)

                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
                out := shl(224, out)

                mstore(resultPtr, out)

                resultPtr := add(resultPtr, 4)
            }

            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }

            mstore(result, encodedLen)
        }

        return string(result);
    }
}