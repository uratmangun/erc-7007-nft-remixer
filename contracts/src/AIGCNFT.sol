// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import {IERC7007} from "../interfaces/IERC7007.sol";
import {ERC721, IERC721, IERC721Metadata} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
import {PoseidonUnit5L} from "./libraries/PoseidonUnit5L.sol";

interface IVerifier {
    function verifyProof(
        uint[2] calldata _pA,
        uint[2][2] calldata _pB,
        uint[2] calldata _pC,
        uint[1] calldata _pubSignals
    ) external view returns (bool);
}

/**
*       DISCLAIMER: THIS SMART CONTRACT IS FOR DEMONSTRATION PURPOSES ONLY!
*                   IT IS NOT AUDITED!
*                   DO NOT USE IT IN PRODUCTION!
*/

/// @notice This contract allows users to mint AIGC NFTs
/// @dev Data generated by Onchain AI Oracle is used as a metadata for ERC721 token
contract AIGCNFT is IERC7007, ERC721 {

    struct AIGCData {
       
        bytes image;
        bytes author;
        bytes requestId;
       
    }
    uint256 public totalSupply;

    IVerifier public verifier;

    uint256 constant SNARK_FIELD_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

    constructor(address verifier_) ERC721("On-chain AI Oracle", "OAO") {
        verifier = IVerifier(verifier_);
    }

    function mint(
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof) public virtual returns (uint256 tokenId) {
        // Decode AIGCData to verify the author
        
        require(verify(prompt, aigcData, proof), "Invalid proof");
        
        tokenId = totalSupply;
        _safeMint(msg.sender, tokenId);
        addAigcData(tokenId, prompt, aigcData, proof);
        totalSupply++;
    }

    function tokenURI(uint256 tokenId) override public view returns (string memory) {
       
        return string(abi.encodePacked("https://erc7007.uratmangun.ovh/api/nft-metadata/", toString(tokenId)));
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721, IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(ERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

   /**
     * @dev Add AIGC data to token at `tokenId` given `prompt`, `aigcData` and `proof`.
     *
     * Optional:
     * - `proof` should not include `aigcData` to save gas.
     * - verify(`prompt`, `aigcData`, `proof`) should return true for zkML scenario.
     */
     function addAigcData(
        uint256 tokenId,
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) public virtual override {
        require(ownerOf(tokenId) != address(0), "ERC7007: nonexistent token");
         emit AigcData(tokenId, prompt, aigcData, proof);
    }

    /**
     * @dev Verify the `prompt`, `aigcData` and `proof`.
     */
    function verify(
        bytes calldata publicInput,
        bytes calldata aigcData,
        bytes calldata proof
    ) public view returns (bool success) {
        // Decode proof bytes
        (
            uint256[2] memory _pA,
            uint256[2][2] memory _pB,
            uint256[2] memory _pC
        ) = abi.decode(proof, (uint256[2], uint256[2][2], uint256[2]));
        
        uint256[1] memory _pubSignals = [uint256(bytes32(publicInput))];
        return verifier.verifyProof(_pA, _pB, _pC, _pubSignals);
    }

    function hashInputs(bytes calldata prompt, bytes calldata aigcData)
        public
        pure
        returns (uint256)
    {
        // Decode AIGCData
        (bytes memory image, bytes memory author, bytes memory requestId) = abi.decode(
            aigcData,
            (bytes, bytes, bytes)
        );

        // Convert variable-length bytes to uint256 (field element conversion)
        uint256 promptHash = uint256(keccak256(prompt)) % SNARK_FIELD_MODULUS;
        uint256 imageHash = uint256(keccak256(image)) % SNARK_FIELD_MODULUS;
        uint256 authorHash = uint256(keccak256(author)) % SNARK_FIELD_MODULUS;
        uint256 requestIdHash = uint256(keccak256(requestId)) % SNARK_FIELD_MODULUS;

        // Poseidon hash with 4 inputs matching circuit's public input computation
        uint256 publicHash = poseidon4([promptHash, imageHash, authorHash, requestIdHash]);
        
        return publicHash;
    }

    function poseidon4(uint256[4] memory inputs) internal pure returns (uint256) {
        return PoseidonUnit5L.poseidon(inputs);
    }

    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT license
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}
