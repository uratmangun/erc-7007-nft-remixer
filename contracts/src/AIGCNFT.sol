// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import {IERC7007} from "../interfaces/IERC7007.sol";
import {ERC721, IERC721, IERC721Metadata} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
interface IVerifier {
    function verifyProof(
        bytes calldata proof,
        uint256[] calldata publicInputs
    ) external view returns (bool);
}

/**
*       DISCLAIMER: THIS SMART CONTRACT IS FOR DEMONSTRATION PURPOSES ONLY!
*                   IT IS NOT AUDITED!
*                   DO NOT USE IT IN PRODUCTION!
*/

/// @notice This contract allows users to mint AIGC NFTs
/// @dev Data generated by Onchain AI Oracle is used as a metadata for ERC721 token
contract AIGCNFT is IERC7007, ERC721 {

    struct AIGCData {
       
        bytes image;
        address author;
        uint256 requestId;
       
    }
    uint256 public totalSupply;

    IVerifier public verifier;

 

    constructor(address verifier_) ERC721("On-chain AI Oracle", "OAO") {
        verifier = IVerifier(verifier_);
    }

    function mint(address to,
        bytes calldata prompt,
        bytes calldata aigcData,
        string calldata uri,
        bytes calldata proof) public virtual returns (uint256 tokenId) {
        // Decode AIGCData to verify the author
        (bytes memory image, address author, uint256 requestId) = abi.decode(aigcData, (bytes, address, uint256));
        require(author == msg.sender, "Only author can mint");
        
        tokenId = totalSupply;
        _safeMint(msg.sender, tokenId);
        addAigcData(tokenId, prompt, aigcData, proof);
        totalSupply++;
    }

    function tokenURI(uint256 tokenId) override public view returns (string memory) {
       
        return string(abi.encodePacked("https://erc7007.uratmangun.ovh/api/metadata/", toString(tokenId)));
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721, IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(ERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

   /**
     * @dev Add AIGC data to token at `tokenId` given `prompt`, `aigcData` and `proof`.
     *
     * Optional:
     * - `proof` should not include `aigcData` to save gas.
     * - verify(`prompt`, `aigcData`, `proof`) should return true for zkML scenario.
     */
     function addAigcData(
        uint256 tokenId,
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) public virtual override {
        require(ownerOf(tokenId) != address(0), "ERC7007: nonexistent token");
        require(verify(prompt, aigcData, proof), "ERC7007: invalid proof");
        emit AigcData(tokenId, prompt, aigcData, proof);
    }

    /**
     * @dev Verify the `prompt`, `aigcData` and `proof`.
     */
    function verify(
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) public view returns (bool success) {
        // Hash the inputs (must match the circuit's public input)
        uint256 publicHash = hashInputs(prompt, aigcData);

        // Verify the proof
        uint256[] memory publicInputs = new uint256[](1);
        publicInputs[0] = publicHash;

        return verifier.verifyProof(proof, publicInputs);
    }

    function hashInputs(bytes calldata prompt, bytes calldata aigcData)
        internal
        pure
        returns (uint256)
    {
        // Decode AIGCData
        (bytes memory image, address author, uint256 requestId) = abi.decode(
            aigcData,
            (bytes, address, uint256)
        );

        // Hash the inputs (must match the circuit's logic)
        return uint256(
            keccak256(abi.encodePacked(prompt, image, author, requestId))
        );
    }
 
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT license
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}
